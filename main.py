import os
import logging
import requests
from dotenv import load_dotenv
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    CallbackContext
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
NUMVERIFY_API_KEY = os.getenv("NUMVERIFY_API_KEY")  # –ö–ª—é—á –æ—Ç NumVerify

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Telegram")],
        [KeyboardButton("üìû –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)

def back_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞
async def check_telegram(update: Update, context: CallbackContext, query: str):
    try:
        if query.startswith('@'):
            user = await context.bot.get_chat(query)
        else:
            try:
                user_id = int(query)
                user = await context.bot.get_chat(user_id)
            except ValueError:
                await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username (@user) –∏–ª–∏ ID")
                return

        info = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:</b>\n\n"
            f"üÜî <b>ID:</b> <code>{user.id}</code>\n"
            f"üëÅ <b>–ò–º—è:</b> {user.first_name or '‚ùå'}\n"
            f"üìå <b>–§–∞–º–∏–ª–∏—è:</b> {user.last_name or '‚ùå'}\n"
            f"üîó <b>Username:</b> @{user.username or '‚ùå'}\n"
            f"üåê <b>–Ø–∑—ã–∫:</b> {user.language_code or '‚ùå'}\n"
            f"ü§ñ <b>–ë–æ—Ç:</b> {'‚úÖ' if user.is_bot else '‚ùå'}\n"
            f"‚≠ê <b>–ü—Ä–µ–º–∏—É–º:</b> {'‚úÖ' if user.is_premium else '‚ùå'}"
        )

        try:
            photos = await context.bot.get_user_profile_photos(user.id, limit=1)
            if photos.photos:
                photo_file = await photos.photos[0][-1].get_file()
                await update.message.reply_photo(
                    photo=photo_file.file_id,
                    caption=info,
                    parse_mode='HTML',
                    reply_markup=back_keyboard()
                )
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")

        await update.message.reply_text(info, parse_mode='HTML', reply_markup=back_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram: {e}")
        await update.message.reply_text(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã",
            reply_markup=back_keyboard()
        )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ NumVerify
async def check_phone(update: Update, phone: str):
    if not NUMVERIFY_API_KEY:
        await update.message.reply_text("‚ùå API –∫–ª—é—á –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return

    try:
        response = requests.get(
            f"http://apilayer.net/api/validate?access_key={NUMVERIFY_API_KEY}&number={phone}"
        )
        data = response.json()

        if data.get('valid'):
            info = (
                f"üìû <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–º–µ—Ä–µ:</b>\n\n"
                f"üî¢ <b>–ù–æ–º–µ—Ä:</b> {phone}\n"
                f"üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {data.get('country_name', '‚ùå')}\n"
                f"üè¢ <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {data.get('carrier', '‚ùå')}\n"
                f"üìü <b>–¢–∏–ø:</b> {data.get('line_type', '‚ùå')}\n"
                f"üåê <b>–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã:</b> +{data.get('country_code', '‚ùå')}\n"
                f"‚úÖ <b>–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å:</b> {'–î–∞' if data['valid'] else '–ù–µ—Ç'}"
            )
            await update.message.reply_text(info, parse_mode='HTML', reply_markup=back_keyboard())
        else:
            await update.message.reply_text(
                "‚ùå –ù–æ–º–µ—Ä –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                reply_markup=back_keyboard()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞",
            reply_markup=back_keyboard()
        )

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üîç <b>–ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n"
        "‚Ä¢ Telegram-–∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "‚Ä¢ –ù–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard(),
        parse_mode='HTML'
    )

async def help_command(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üìå <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n"
        "1. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ <b>Telegram</b> –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "   ‚Ä¢ @username\n"
        "   ‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "2. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ <b>–Ω–æ–º–µ—Ä–∞</b> –≤–≤–µ–¥–∏—Ç–µ:\n"
        "   ‚Ä¢ +79123456789\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API NumVerify",
        parse_mode='HTML'
    )

async def handle_message(update: Update, context: CallbackContext):
    text = update.message.text.strip()

    if text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Telegram":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    
    elif text == "üìû –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–º–µ—Ä":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+79123456789):")
    
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
    
    elif text.startswith("@"):
        await check_telegram(update, context, text)
    
    elif text.startswith("+"):
        await check_phone(update, text)
    
    else:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ù–∞–∂–º–∏—Ç–µ /help")

async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_main":
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_keyboard()
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))
    
    app.run_polling()

if __name__ == "__main__":
    main()
